// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ContoursAI_SDK
import AVFoundation
import CommonCrypto
@_exported import ContoursAI_SDK
import CryptoKit
import Foundation
import Swift
import UIKit
import _Concurrency
extension UIKit.UIColor {
  public static var lineColor: UIKit.UIColor {
    get
  }
  public static var loaderBackColor: UIKit.UIColor {
    get
  }
  public static func convertHexToRGB(hex: Swift.UInt32) -> UIKit.UIColor
  public static func convertHexStringToColor(hexString: Swift.String, alpha: CoreGraphics.CGFloat? = 1.0) -> UIKit.UIColor
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int)
  convenience public init(rgb: Swift.Int)
}
public enum NVActivityIndicatorType : Swift.CaseIterable {
  case circleStrokeSpin
  public static func == (a: ContoursAI_SDK.NVActivityIndicatorType, b: ContoursAI_SDK.NVActivityIndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ContoursAI_SDK.NVActivityIndicatorType]
  public static var allCases: [ContoursAI_SDK.NVActivityIndicatorType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FadeInAnimation = (UIKit.UIView) -> Swift.Void
public typealias FadeOutAnimation = (UIKit.UIView, @escaping () -> Swift.Void) -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) final public class NVActivityIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TYPE: ContoursAI_SDK.NVActivityIndicatorType
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TEXT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_PADDING: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_SIZE: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_SPACING: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_FONT: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_BACKGROUND_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_IN_ANIMATION: (_ view: UIKit.UIView) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_OUT_ANIMATION: (_ view: UIKit.UIView, _ complete: @escaping () -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor(unsafe) final public var type: ContoursAI_SDK.NVActivityIndicatorType
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var color: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var padding: CoreGraphics.CGFloat
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) final public var animating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, type: ContoursAI_SDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var bounds: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) final public func startAnimating()
  @_Concurrency.MainActor(unsafe) final public func stopAnimating()
  @objc deinit
}
public protocol ParameterConvertible : Swift.Decodable, Swift.Encodable {
  static func objectFrom(json: Any, decoder: Foundation.JSONDecoder) throws -> Self?
  func toParams() throws -> [Swift.String : Any]?
}
extension Swift.Array : ContoursAI_SDK.ParameterConvertible where Element : ContoursAI_SDK.ParameterConvertible {
}
extension ContoursAI_SDK.ParameterConvertible {
  public static func objectFrom(json: Any, decoder: Foundation.JSONDecoder = JSONDecoder()) throws -> Self?
  public static func objectFromWithoutSnakeCase(json: Any, decoder: Foundation.JSONDecoder = JSONDecoder()) throws -> Self?
  public func toParams() throws -> [Swift.String : Any]?
}
extension UIKit.UIFont {
  public static func loadFonts(fontName: Swift.String)
}
public typealias JSON = [Swift.String : Any]
public typealias CallBackAny = (Any) -> Swift.Void
public protocol NVActivityIndicatorViewable {
}
extension ContoursAI_SDK.NVActivityIndicatorViewable where Self : UIKit.UIViewController {
  public var isAnimating: Swift.Bool {
    get
  }
  public func startAnimating(_ size: CoreGraphics.CGSize? = nil, message: Swift.String? = nil, messageFont: UIKit.UIFont? = nil, type: ContoursAI_SDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil, displayTimeThreshold: Swift.Int? = nil, minimumDisplayTime: Swift.Int? = nil, backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, fadeInAnimation: ContoursAI_SDK.FadeInAnimation? = NVActivityIndicatorView.DEFAULT_FADE_IN_ANIMATION)
  public func stopAnimating(_ fadeOutAnimation: ContoursAI_SDK.FadeOutAnimation? = NVActivityIndicatorView.DEFAULT_FADE_OUT_ANIMATION)
}
public enum EndPoints : Swift.Hashable {
  case registerDevice
  case getDownloadURL(Swift.String)
  public var httpType: Swift.String {
    get
  }
  public var urlString: Swift.String {
    get
  }
  public var completeUrl: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ContoursAI_SDK.EndPoints, b: ContoursAI_SDK.EndPoints) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NetworkManagerDelegate : ObjectiveC.NSObject {
  func downloadCompelete(url: Foundation.URL)
  func downloadingFailed()
  func downloadInProgress(downloadPercentage: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class NetworkManager : ObjectiveC.NSObject, Foundation.URLSessionDownloadDelegate, Foundation.URLSessionTaskDelegate {
  public static let shared: ContoursAI_SDK.NetworkManager
  @objc override dynamic public init()
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  @objc deinit
}
public protocol CheckCapturedDelegate : ObjectiveC.NSObject {
  func imageCaptured(frontImage: UIKit.UIImage?, backImage: UIKit.UIImage?)
}
public class ContoursAIFramework {
  public var count: Swift.Int {
    get
  }
  public init(_ capacity: Swift.Int)
  public func add(_ fruit: ContoursAI_SDK.Fruit)
  public func getInitialScreen(isForntCapturing: Swift.Bool, clientId: Swift.String, licenceFileName: Swift.String, licenceFileType: Swift.String, controller: UIKit.UIViewController) -> UIKit.UIViewController
  @objc deinit
}
public enum Fruit : Swift.String {
  case apple
  case banana
  case orange
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Localizable {
  public init(_ rawValue: Swift.String)
}
extension ContoursAI_SDK.Localizable {
  public static let tipsHeading: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint1: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint2: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint3: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint4: ContoursAI_SDK.Localizable
  public static let dontShowAgain: ContoursAI_SDK.Localizable
  public static let begin: ContoursAI_SDK.Localizable
  public static let endorsementBackCheckText: ContoursAI_SDK.Localizable
  public static let endorsementElectronicDepositText: ContoursAI_SDK.Localizable
  public static let endorsementNowTakePictureText: ContoursAI_SDK.Localizable
  public static let continueCTA: ContoursAI_SDK.Localizable
  public static let cornerIntroPoint1: ContoursAI_SDK.Localizable
  public static let cornerIntroPoint2: ContoursAI_SDK.Localizable
  public static let checkCaptureTitleFront: ContoursAI_SDK.Localizable
  public static let checkCaptureTitleBack: ContoursAI_SDK.Localizable
  public static let moveCameraLeft: ContoursAI_SDK.Localizable
  public static let moveCameraRight: ContoursAI_SDK.Localizable
  public static let moveCameraUp: ContoursAI_SDK.Localizable
  public static let moveCameraDown: ContoursAI_SDK.Localizable
  public static let moveCameraAway: ContoursAI_SDK.Localizable
  public static let flipCheckOver: ContoursAI_SDK.Localizable
  public static let captureSuccessful: ContoursAI_SDK.Localizable
  public static let ensureFourDots: ContoursAI_SDK.Localizable
  public static let rotateCheck: ContoursAI_SDK.Localizable
  public static let holdStedy: ContoursAI_SDK.Localizable
  public static let use: ContoursAI_SDK.Localizable
  public static let retake: ContoursAI_SDK.Localizable
  public static let cameraAccessDeniedTitle: ContoursAI_SDK.Localizable
  public static let cameraAccessDeniedDesc: ContoursAI_SDK.Localizable
  public static let dialogViewButtonSetting: ContoursAI_SDK.Localizable
  public static let manualAlertDialogTitle: ContoursAI_SDK.Localizable
  public static let manualAlertDialogDesc: ContoursAI_SDK.Localizable
  public static let manualAlertDialogButton: ContoursAI_SDK.Localizable
  public static let positionCheckWithinTheFrame: ContoursAI_SDK.Localizable
  public static let ensureAllFourCorner: ContoursAI_SDK.Localizable
  public static let micrOverlayText: ContoursAI_SDK.Localizable
  public static let endorseOverlayText: ContoursAI_SDK.Localizable
  public static let error: ContoursAI_SDK.Localizable
  public static let loadingProgressMessage: ContoursAI_SDK.Localizable
  public static let loadingFailureMessage: ContoursAI_SDK.Localizable
  public static let loadingFailureTitle: ContoursAI_SDK.Localizable
  public static let tryAgain: ContoursAI_SDK.Localizable
}
extension ContoursAI_SDK.Localizable {
  public static let tipsHeadingAccessibility: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint1Accessibility: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint2Accessibility: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint3Accessibility: ContoursAI_SDK.Localizable
  public static let tipsBodyPoint4Accessibility: ContoursAI_SDK.Localizable
  public static let dontShowAgainAccessibility: ContoursAI_SDK.Localizable
  public static let beginAccessibility: ContoursAI_SDK.Localizable
  public static let endorsementBackCheckAccessibilityText: ContoursAI_SDK.Localizable
  public static let endorsementElectronicDepositAccessibilityTest: ContoursAI_SDK.Localizable
  public static let endorsementNowTakePictureAccessibilityText: ContoursAI_SDK.Localizable
  public static let continueCTAAccessibility: ContoursAI_SDK.Localizable
  public static let cornerIntroPoint1Accessibility: ContoursAI_SDK.Localizable
  public static let cornerIntroPoint2Accessibility: ContoursAI_SDK.Localizable
  public static let checkCaptureTitleFrontAccessibility: ContoursAI_SDK.Localizable
  public static let checkCaptureTitleBackAccessibility: ContoursAI_SDK.Localizable
  public static let moveCameraLeftAccessibility: ContoursAI_SDK.Localizable
  public static let moveCameraRightAccessibility: ContoursAI_SDK.Localizable
  public static let moveCameraUpAccessibility: ContoursAI_SDK.Localizable
  public static let moveCameraDownAccessibility: ContoursAI_SDK.Localizable
  public static let moveCameraAwayAccessibility: ContoursAI_SDK.Localizable
  public static let flipCheckOverAccessibility: ContoursAI_SDK.Localizable
  public static let captureSuccessfulAccessibilit: ContoursAI_SDK.Localizable
  public static let ensureFourDotsAccessibilit: ContoursAI_SDK.Localizable
  public static let rotateCheckAccessibilit: ContoursAI_SDK.Localizable
  public static let holdStedyAccessibilit: ContoursAI_SDK.Localizable
  public static let useAccessibility: ContoursAI_SDK.Localizable
  public static let retakeAccessibility: ContoursAI_SDK.Localizable
  public static let cameraAccessDeniedTitleAccessibility: ContoursAI_SDK.Localizable
  public static let cameraAccessDeniedDescAccessibility: ContoursAI_SDK.Localizable
  public static let dialogViewButtonSettingAccessibility: ContoursAI_SDK.Localizable
  public static let manualAlertDialogTitleAccessibility: ContoursAI_SDK.Localizable
  public static let manualAlertDialogDescAccessibility: ContoursAI_SDK.Localizable
  public static let manualAlertDialogButtonAccessibility: ContoursAI_SDK.Localizable
  public static let positionCheckWithinTheFrameAccessibility: ContoursAI_SDK.Localizable
  public static let ensureAllFourCornerAccessibility: ContoursAI_SDK.Localizable
  public static let micrOverlayTextAccessibility: ContoursAI_SDK.Localizable
  public static let endorseOverlayTextAccessibility: ContoursAI_SDK.Localizable
  public static let errorAccessibility: ContoursAI_SDK.Localizable
  public static let loadingProgressMessageAccessibility: ContoursAI_SDK.Localizable
  public static let loadingFailureMessageAccessibility: ContoursAI_SDK.Localizable
  public static let loadingFailureTitleAccessibility: ContoursAI_SDK.Localizable
  public static let tryAgainAccessibility: ContoursAI_SDK.Localizable
}
@_hasMissingDesignatedInitializers open class ProgressView {
  open func showSmallProgressView(onView: UIKit.UIView, loaderBackColor: UIKit.UIColor = .loaderBackColor, size: CoreGraphics.CGFloat = 80.0)
  open func hideProgressView()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class IndicatorView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var indicatorSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func showIndicator(isStart: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func stopAnimating()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Encryption : ObjectiveC.NSObject {
  public static let shared: ContoursAI_SDK.Encryption
  @objc override dynamic public init()
  @objc deinit
}
final public class ActivityData {
  public init(size: CoreGraphics.CGSize? = nil, message: Swift.String? = nil, messageFont: UIKit.UIFont? = nil, messageSpacing: CoreGraphics.CGFloat? = nil, type: ContoursAI_SDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil, displayTimeThreshold: Swift.Int? = nil, minimumDisplayTime: Swift.Int? = nil, backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NVActivityIndicatorPresenter {
  public static let sharedInstance: ContoursAI_SDK.NVActivityIndicatorPresenter
  final public var isAnimating: Swift.Bool {
    get
  }
  final public func startAnimating(_ data: ContoursAI_SDK.ActivityData, _ fadeInAnimation: ContoursAI_SDK.FadeInAnimation? = nil)
  final public func stopAnimating(_ fadeOutAnimation: ContoursAI_SDK.FadeOutAnimation? = nil)
  final public func setMessage(_ message: Swift.String?)
  @objc deinit
}
extension ContoursAI_SDK.NVActivityIndicatorType : Swift.Equatable {}
extension ContoursAI_SDK.NVActivityIndicatorType : Swift.Hashable {}
extension ContoursAI_SDK.Fruit : Swift.Equatable {}
extension ContoursAI_SDK.Fruit : Swift.Hashable {}
extension ContoursAI_SDK.Fruit : Swift.RawRepresentable {}
